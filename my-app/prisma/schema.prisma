generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native" ,  "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "linux-musl", "windows"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookmarks    Bookmark[]
  favourites   Favourite[]
passedQuestions  PassedProblem[]
failedQuestions   FailedProblem[]
Submission       Submission[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  difficulty  String        // 'Easy', 'Medium', 'Hard'
  tags        String[]
  testCases   TestCase[]
  submissions Submission[]
  startcode   String?
  testcode   String?
  favourites  Favourite[]
  bookmarks   Bookmark[] 
  passedProblem PassedProblem[] 
  failedProblem FailedProblem[]
}

model TestCase {
  id         Int      @id @default(autoincrement())
  input      String
  expected   String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int
}

model Submission {
  id         Int      @id @default(autoincrement())
  code       String
  language   String   // e.g., "cpp", "python", "js"
  output     String?
  verdict    String   // "Accepted", "Wrong Answer", etc.
  createdAt  DateTime @default(now())
  types      String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int
}

model Language {
  id        Int    @id @default(autoincrement())
  name      String // e.g., "Python"
  extension String // ".py"
  version   String // "3.10"
}

model Favourite {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int

  @@unique([userId, problemId]) // Prevents duplicate favourites
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int

  @@unique([userId, problemId]) // Prevents duplicate bookmarks
}

model PassedProblem {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int

  @@unique([userId, problemId])
}

model FailedProblem {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  Int

  @@unique([userId, problemId])
}